<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RageCoop.Core</name>
    </assembly>
    <members>
        <member name="M:RageCoop.Core.CoreUtils.GetLocalAddress">
            <summary>
            Get local ip addresses on all network interfaces 
            </summary>
            <returns></returns>
        </member>
        <member name="M:RageCoop.Core.Extensions.GetBytes(GTA.Math.Quaternion)">
            <summary>
            
            </summary>
            <param name="qua"></param>
            <returns>An array of bytes with length 16</returns>
        </member>
        <member name="T:RageCoop.Core.PublicExtensions">
            <summary>
            Some extension methods provided by RageCoop
            </summary>
        </member>
        <member name="M:RageCoop.Core.PublicExtensions.GetSHA256Hash(System.String)">
            <summary>
            Get a SHA256 hashed byte array of the input string, internally used to hash password at client side.
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:RageCoop.Core.PublicExtensions.ToHexString(System.Byte[])">
            <summary>
            Convert a byte array to hex-encoded string, internally used to trigger handshake event
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RageCoop.Core.PublicExtensions.ToIP(System.String)">
            <summary>
            Convert a string to IP address
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:RageCoop.Core.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="F:RageCoop.Core.Logger.LogLevel">
            <summary>
            0:Trace, 1:Debug, 2:Info, 3:Warning, 4:Error
            </summary>
        </member>
        <member name="P:RageCoop.Core.Logger.Name">
            <summary>
            Name of this logger
            </summary>
        </member>
        <member name="F:RageCoop.Core.Logger.LogPath">
            <summary>
            Path to log file.
            </summary>
        </member>
        <member name="F:RageCoop.Core.Logger.UseConsole">
            <summary>
            Whether to flush messages to console instead of log file
            </summary>
        </member>
        <member name="M:RageCoop.Core.Logger.Info(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Warning(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Error(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Error(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Error(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Debug(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Trace(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RageCoop.Core.Logger.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:RageCoop.Core.Logger.Dispose">
            <summary>
            Stop backdround thread and flush all pending messages.
            </summary>
        </member>
        <member name="M:RageCoop.Core.MathExtensions.ToVector(GTA.Math.Quaternion)">
            <summary>
            
            </summary>
        </member>
        <member name="M:RageCoop.Core.MathExtensions.ToQuaternion(GTA.Math.Vector3,System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:RageCoop.Core.CoopPeer.Dispose">
            <summary>
            Terminate all connections and background thread
            </summary>
        </member>
        <member name="T:RageCoop.Core.ServerInfo">
            <summary>
            A json object representing a server's information as annouced to master server.
            </summary>
        </member>
        <member name="P:RageCoop.Core.Packets.HolePunch.Status">
            <summary>
            1:initial, 2:acknowledged, 3:confirmed
            </summary>
        </member>
        <member name="T:RageCoop.Core.Packets.ConnectionRequest">
            <summary>
            Request direct connection to another client
            </summary>
        </member>
        <member name="T:RageCoop.Core.Packets.P2PConnect">
            <summary>
            Sent to the host when a direct connection has been established
            </summary>
        </member>
        <member name="F:RageCoop.Core.Packets.Handshake.AesKeyCrypted">
            <summary>
            The asymetrically crypted Aes key
            </summary>
        </member>
        <member name="F:RageCoop.Core.Packets.Handshake.AesIVCrypted">
            <summary>
            The asymetrically crypted Aes IV
            </summary>
        </member>
        <member name="P:RageCoop.Core.Packets.Handshake.PasswordEncrypted">
            <summary>
            The password hash with client Aes
            </summary>
        </member>
        <member name="P:RageCoop.Core.Packets.PlayerInfoUpdate.PedID">
            <summary>
            Ped ID for this Player
            </summary>
        </member>
        <member name="T:RageCoop.Core.Scripting.CustomEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:RageCoop.Core.Scripting.CustomEvents.Hash(System.String)">
            <summary>
            Get a Int32 hash of a string.
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The exception is thrown when the name did not match a previously computed one and the hash was the same.</exception>
        </member>
        <member name="T:RageCoop.Core.Scripting.ResourceFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:RageCoop.Core.Scripting.ResourceFile.Name">
            <summary>
            Full name with relative path of this file
            </summary>
        </member>
        <member name="P:RageCoop.Core.Scripting.ResourceFile.IsDirectory">
            <summary>
            Whether this is a directory
            </summary>
        </member>
        <member name="P:RageCoop.Core.Scripting.ResourceFile.GetStream">
            <summary>
            Get a stream that can be used to read file content.
            </summary>
        </member>
        <member name="T:RageCoop.Core.Worker">
            <summary>
            A worker that constantly execute jobs in a background thread.
            </summary>
        </member>
        <member name="P:RageCoop.Core.Worker.Name">
            <summary>
            Name of the worker
            </summary>
        </member>
        <member name="P:RageCoop.Core.Worker.IsBusy">
            <summary>
            Whether this worker is busy executing job(s).
            </summary>
        </member>
        <member name="M:RageCoop.Core.Worker.QueueJob(System.Action)">
            <summary>
            Queue a job to be executed
            </summary>
            <param name="work"></param>
        </member>
        <member name="M:RageCoop.Core.Worker.Stop">
            <summary>
            Finish current job and stop the worker.
            </summary>
        </member>
        <member name="M:RageCoop.Core.Worker.Dispose">
            <summary>
            Finish current job and stop the worker.
            </summary>
        </member>
    </members>
</doc>
